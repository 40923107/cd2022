var tipuesearch = {"pages": [{'title': 'About', 'text': '個人網站： https://40923107.github.io/cd2022/content/index.html \n 個人倉儲： https://github.com/40923107/cd2022 \n 大組網站： https://40923107.github.io/cd2022ag2/content/index.html \n 大組倉儲： https://github.com/40923107/cd2022ag2 \n 小組網站： https://40923107.github.io/cd2022ag2-2/content/About.html \n 小組倉儲： https://github.com/40923107/cd2022ag2-2 \n \n', 'tags': '', 'url': 'About.html'}, {'title': '期末考週', 'text': '題目 1、2 \n uarm 零組件繪圖過程 \n \n \n \n \n \n - - - - - - - - - - - - - - - - - - - - - - - \xa0 \n 採用的 NX 套件版本與任務執行心得 \n 這次以 NX12 修改零件並組立，其中在 NX12 修改時，要去觀察建模過程，找到需修改的建模步驟，讓我了解在繪製零件時，建模方式需要簡單明瞭，這樣在零件需要修改時，操作會更方便也更快。另外也更熟悉 NX12 的組立方式，也發現 uarm 的設計，只要改變兩個關鍵零件，就能讓左右邊互換，這樣的客製化設計很方便，讓我了解這部分在機械設計上的重要性。 \n \n \n 題目 3 \n 以 slider 控制前三軸的轉動 \n \n \n \n \n \n - - - - - - - - - - - - - - - - - - - - - - - \xa0 \n \n 題目 4 \n 在 Teams 會議中, 畫面分享及錄影功能, 由兩位 (含) 以上組員測試題目 3. 的 XML UI slider 控制功能. \n \n \n - - - - - - - - - - - - - - - - - - - - - - - \xa0 \n 心得： \n 這題因為第十六週有練習過，過程比較順利。操作過程中，有時會忘記要先啟動模擬再連線，因此在會議中示範操作並提醒大家。 \n \n \n 題目 5 \n 加入 suctionPad 零件, 以手動操控或程式操控的方式, 錄製 block 方塊零件的取放模擬影片 \n \n \n \n \n - - - - - - - - - - - - - - - - - - - - - - - \xa0 \n 心得： \n 從前幾週學習取放模擬到現在，也練習很多次，已經非常熟悉，所以示範操作過程也很順利。 \n \n 題目 6 \n 以跨網路 Python remote API 的方式, 錄製圖形介面 slider 控制前三軸的轉動影片 \n \n \n - - - - - - - - - - - - - - - - - - - - - - - \xa0 \n 心得： \n 這題在操作上遇到比較多困難。 一開始操控者(組員40923107)在連線被操控者(組長40923105) 的vpn 時，因為防毒軟體防火牆的關係，連線好幾次都失敗，好險最後有發現防火牆的問題。 再來是IP位址的設定，操控者需要修改串流伺服器對應的IP位址，改成被操控者筆電的IP。 最後，被操控者要先啟動模擬並打開瀏覽器端，操控者再執行uarm_tkinter_control.py，被操控者就可在瀏覽器端，透過網際介面觀看uarm 模擬。過程中我們了解到虛實整合的重要性，像現在這種網路時代再加上疫情，這樣的跨網路交流更是重要。-', 'tags': '', 'url': '期末考週.html'}, {'title': 'w13', 'text': '下載 Coppeliasim_4.3.0_rev3 啟動設定。 \n 1.在批次檔開啟 coppeliasim，且須讀到本身所在目錄上的 dll (動態連結庫中的檔案) \n (/D：宣告在本身目錄區打開) \n REM start with working durectory\nstart /D %VREP_PATH% coppeliasim.exe \n \n 2. \n REM for PyRep\nset VREP_PATH=D:\\CoppeliaSimEdu_4.3.0_rev3 \n \n 之後只要開啟批次檔，就會啟動\xa0 Coppeliasim_4.3.0_rev3 \n \n \n \n 3. \n \n \n 4.遇到問題 \n \n \n pip install pyzmq、cbor \n \n \n \n 5.執行  external_python.py \n \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w14', 'text': '以鍵盤控制 MTB_nx robot \n 檔案： 40923107_MTB robot pick and place \n R：逆時針轉\xa0 \xa0 \xa0 L：順時針轉 \n D：吸盤下降\xa0 \xa0 \xa0 U：吸盤上升 \n P：激活吸盤\xa0 \xa0 \xa0Q：停用吸盤 \n C：吸盤座標 \n ------------------------- \n \n \n \n \n \n \n \n \n \n \n \n 自己運轉 \n \n \n ------------------------------------- \n function sysCall_init() \n    axis1=sim.getObject(\'/joint1\')\n    axis2=sim.getObject(\'/joint2\')\n    axis3=sim.getObject(\'/joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    MTB_Robot=sim.getObject("/base")\n    BaseFrame=sim.getObject("/BaseFrame")\n    block =sim.getObject("/block")\n    rotation1 = 0\n    distance3 = 0\n    deg = math.pi/180.\nend\n  \n  \nfunction sysCall_actuation() \n \n    rotation1 = rotation1 + 0.5*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n \n    message, auxiliaryData=sim.getSimulatorMessage()\n        while message ~= -1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage(\'user press key:\'..key)\n            if (message==sim.message_keypress) then\n               --if (auxiliaryData[1]==112) then --p activate the suction pad\n                if (auxiliaryData[1]==string.byte(\'p\')) then\n                    -- if key p pressed activate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                end -- if p\n                if (auxiliaryData[1]==113) then --q deactivate the suction pad\n                    -- if key q pressed deactivate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if q\n                if (auxiliaryData[1]==114) then --r right turn in degree\n                    -- if key r pressed axis1 angle adds 5 degrees\n                     rotation1 = rotation1 + 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if r\n                if (auxiliaryData[1]==108) then --l left turn in degree\n                    -- if key l pressed axis1 angle substract 5 degrees\n                     rotation1 = rotation1 - 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if l\n                if (auxiliaryData[1]==100) then --d suction pad down\n                    -- if key d pressed axis3 will down 0.01 m\n                     distance3 = distance3 + 0.01\n                     sim.setJointPosition(axis3, distance3)\n                end -- if d\n                if (auxiliaryData[1]==117) then --u suction pad up\n                    -- if key u pressed axis3 will up 0.01 m\n                     distance3 = distance3 - 0.01\n                     sim.setJointPosition(axis3, distance3)\n                end -- if u\n                if (auxiliaryData[1]==99) then --c coordinate of block\n                    --blockPosition = sim.getObjectPosition(block, BaseFrame)\n                    blockPosition = sim.getObjectPosition(suctionPad, BaseFrame)\n                    sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n                end --if c\n           end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n        end -- while\nend -- function\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n  \n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n  \n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n  \n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n  \n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n      \n]]--\nend\nfunction sysCall_cleanup() \nend\n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n  \n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\n  \n  \nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n \n \n', 'tags': '', 'url': 'w14.html'}, {'title': 'w15', 'text': '參考\xa0 w7 任務 \xa0 中的 MTB robot pick and place 場，用 NX12 繪製 MTB robot 零組件， 匯入 \xa0 CoppeliaSim 4.3.0 rev3 \xa0 建立 object 取放模擬場景。 \n MTB robot NX12 零組件及 CoppeliaSIM 模擬檔案： 40923107_NX12_MTB robot pick and place \n \n \n \n \n \n \n \n 將以上運用在 uarm 取放模擬\xa0 \n \n \n \n \n joint1 \n \n \n joint2 \n \n \n joint3 \n \n \n \n \n K \n \n \n 逆時針 2 ° \n \n \n H \n \n \n 逆時針 1 ° (向上) \n \n \n F \n \n \n 逆時針 1 °\xa0 (使吸盤向下) \n \n \n \n \n L \n \n \n 順時針 2 ° \n \n \n J \n \n \n 順時針 1 °\xa0 (向下) \n \n \n G \n \n \n 順時針 1 ° (使吸盤向上) \n \n \n \n \n \xa0 \n 檔案下載： 40923107_uarm_pick and place \n \n \n \n \n \n uarm 一次定位到方塊並進行取放 \n 檔案下載： 40923107_xyz控制_uarm_pick and place \n 按 z：一次吸到方塊 按 x：上一步吸完並放下後，按 x 可再次吸取 按 y：回原高度 ( x+z 的移動高度) \n \n \n 新增之程式碼 \n             if (auxiliaryData[1]==string.byte("z")) then\n                rotation2 = rotation2 - 13.8*deg\n                rotation3 = rotation3 + 14.8*deg\n                sim.setJointTargetPosition(axis3, rotation3)\n                sim.setJointTargetPosition(axis2, rotation2)\n            end -- if z\n            \n            if (auxiliaryData[1]==string.byte("y")) then\n                rotation2 = rotation2 + 17.8*deg\n                rotation3 = rotation3 - 17.8*deg\n                sim.setJointTargetPosition(axis3, rotation3)\n                sim.setJointTargetPosition(axis2, rotation2)\n            end -- if y\n\n            if (auxiliaryData[1]==string.byte("x")) then\n                 rotation2 = rotation2 - 4*deg\n                 rotation3 = rotation3 + 3*deg\n                 sim.setJointTargetPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if x \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'W16', 'text': '', 'tags': '', 'url': 'W16.html'}, {'title': 'Visualization Stream', 'text': '利用 Three.js， 透過\xa0 simAddOnVisualization stream.lua \xa0， 將場景中的幾何物件串流到瀏覽器，可 透過網際介面觀看、操控遠端場景的物件，也能讓多位操控者透過網路控制 \xa0 w15_uarm_tkinter_control.7z \xa0 中的 uArm 機械手臂。 \n \n \n \n \n \n', 'tags': '', 'url': 'Visualization Stream.html'}, {'title': 'rotating_cuboid', 'text': '\n \n \n \n \n', 'tags': '', 'url': 'rotating_cuboid.html'}, {'title': 'Online exam', 'text': '已知左側綠色底座的  uArm  機械手臂 ,  其基座座標原點位於絕對座標  (1.0, 0.25, 0),  啟動模擬後  green_suctionpad_frame  座標原點則位於  (0.22859, 0.26047, 0.36576),  請列出運算式說明 ,  啟動模擬後  joint1, joint2  與  joint3  分別以逆時針旋轉  5  度後 ,  求  green_suctionpad_frame  的絕對座標值 . \n \xa0 \n 鍵盤指令 \n \n \n \n \n joint1 \n \n \n joint2 \n \n \n joint3 \n \n \n \n \n K \n \n \n 逆時針 2 ° \n \n \n H \n \n \n 逆時針 1 ° \n \n \n F \n \n \n 逆時針 1 ° \n \n \n \n \n L \n \n \n 順時針 2 ° \n \n \n J \n \n \n 順時針 1 ° \n \n \n G \n \n \n 順時針 1 ° \n \n \n \n \n \xa0 \n \n 先把程式中， joint1 逆時針轉的角度改成 5 度 \n \xa0 \n 啟動模擬後  green_suctionpad_frame  座標原點： \n (0.2606,0.2602,0.3463) \n \xa0 \n \n \xa0 \n 啟動模擬後  joint1, joint2  與  joint3  分別以逆時針旋轉  5  度之座標： \n (0.2601,0.2602,0.3470) \n \n \xa0 \n \xa0 \n', 'tags': '', 'url': 'Online exam.html'}, {'title': 'w17', 'text': '將個人與分組協力完成之 uArm 機械手臂，加上 Suction Pad 執行取放 O X 物件，執行 Tic-Tae-Toe 遊戲場景模擬場景之 NX 零件檔案。 \n 40923107_uarm_tic tac toe \n \n \n', 'tags': '', 'url': 'w17.html'}, {'title': 'uarm', 'text': '零組件 \n 另外我有負責 NX12 繪製零件的組合及零件改良 \n \n \n \n \n \n ---------------------------------------------------------------------------------- \n 1_底座、2_軸承支撐 \n 因增加了零件 2_2軸承支撐軸，整體為配合設計高度，因此底座整體須調低高度。 \n \n \n \n \n \n ---------------------------------------------------------------------------------- \n 2_2軸承支撐軸 \n 帶動 uarm 第一軸轉動 \n \n ---------------------------------------------------------------------------------- \n 7_2絞鍊 \n 原本我們簡化的絞鍊沒有挖高度6.1的凹槽，考量之後裝配模擬後有重量太重的問題，因此補上了挖空的設計。 \n \n \n \n \n \n \n \n CoppeliaSIM模擬檔案： 40923107_uarm_模擬 \n 我先使用老師的檔案練習 \n \n \n \n 後來用自組檔按模擬 \n \n \n', 'tags': '', 'url': 'uarm.html'}, {'title': 'midterm', 'text': 'W7任務： \n 1.利用隨身程式系統編譯 SCARA robot 模擬系統. \n 2.繪製 Pick and Place demo 範例所需的零組件，自訂連桿尺寸，並完成 Coppeliasim 4.1.0、4.2.0 與 4.3.0 版的 MTB 機械手臂 Pick and Place 模擬。 \n 當前進度： 1.已完成 2.已完成零件繪製。 \n \n W8任務： \n 1.uarm 各零件工程圖 \n uarm_Solvespace 零件檔 \n uarm_工程圖 \n \n 2.uarm 組合圖 STL 格式轉入 CoppeliaSim \n 3.GUI slider 控制前三軸作動 \n 檔案： 40923107_uarm_模擬 \n \n \n \n', 'tags': '', 'url': 'midterm.html'}, {'title': '每週筆記', 'text': '', 'tags': '', 'url': '每週筆記.html'}, {'title': 'ssh 設定', 'text': '透過 SSH 協定，參與組長帳號下的分組倉儲內容協同編輯 \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'ssh 設定.html'}, {'title': 'W1', 'text': '', 'tags': '', 'url': 'W1.html'}, {'title': '網路環境設定', 'text': '使用批次檔案完成  IPv6  網路設定 ,  避開惡意軟體的網路攻擊。 \n 1.下載 cadlab_network_setup.zip，重新開機，以管理員權限執行ipv6_network_setup.bat \n \n 2.設定proxy \n \n \n', 'tags': '', 'url': '網路環境設定.html'}, {'title': '建立倉儲', 'text': '在個人帳號下，用最新版的 cmsimde\xa0建立 cd2022倉儲 \n 我選擇以子模組的方式建立倉儲 \n 1.先在Github建立cd2022倉儲 \n \n \n 2.開啟start_ipv6.bat \n \n \n \n 開始把沒有 git 版本資料的 cmsimde 目錄放到個人倉儲 \n 3.在路徑\xa0 tmp>cd2022>cmsimde>up_dir \n 全選  up_dir 的資料貼到 cd2022資料夾 \n \n \n 4在  tmp>cd2022>cmsimde \n 選擇以下的東西貼至 cd2022資料夾 \n \n \n 5.到資料夾路徑為 tmp>cd2022>cmsimde>up_dir \n 複製以下的檔案貼至  cd2022 ，取代檔案 \n \n 6.然後建立Token，再 cms、acp 推送 \n \n \n \n 建立token \n \n 1.創建  Token ，命名為倉儲名稱，到期日改  No expiration ，勾選  repo ，創建完成後複製  code \n \n \n 2.開啟自己倉儲資料夾中.git 裡的 config，在https:// 後面貼上複製的 code，後面加上 @ 並儲存。 \n \n \n \n', 'tags': '', 'url': '建立倉儲.html'}, {'title': 'W2', 'text': '', 'tags': '', 'url': 'W2.html'}, {'title': '建立小組倉儲', 'text': '先到小組的github網站，按Fork，複製網址，開啟cmd \n cd tmp git clone --recurse-submodules https://github.com/自己學號/cd2022ag2-2.git \n 建立一個小組的token \n 完成後先git pull，然後cms，編輯完acp推送(每次推送或編輯前都要先 git pull) \n 回到小組github，點New pull request，creat一個新的，組長再去小組 github 的 pull requests 點 merge 合併 \n 組長要改分支(branch none改main)才能看到靜態網站。 \n', 'tags': '', 'url': '建立小組倉儲.html'}, {'title': '分組名單', 'text': '# cd2022_teacher.py\nstudList = "cd2022_teacher.txt"\ncourTitle = "cd2022"\n \n# group title initial\ngrpTitle = studList[:6] + "ag"\n \n# student Account and github Account as inputs\ndef perWeb(s, g):\n    pSite = "<a href=\\"https://" + g + ".github.io/" + courTitle + "\\">" + s + " web</a>"\n    print(pSite)\n \ndef perRepo(s, g):\n    pSite = "<a href=\\"https://github.com/" + g + "/" + courTitle + "\\">" + s + " repo</a>"\n    print(pSite)\n     \ndef grpWeb(s, g, ord):\n    pSite = "<a href=\\"https://" + g + ".github.io/" + grpTitle + str(ord) + "\\">grp web</a>"\n    print(pSite)\n     \ndef grpRepo(s, g, ord):\n    pSite = "<a href=\\"https://github.com/" + g + "/" + grpTitle + str(ord) + "\\">grp repo</a>"\n    print(pSite)\n \n# open file, default is read mode, since txt content no chinese char\n# no encoding = "UTF-8" is needed\nwith open(studList) as fh:\n    # readlines will read into the whole line and put into list format\n    # has \\n at the end of each line\n    data = fh.readlines()\n \ngrpCount = 0\nfor i in range(len(data)):\n    # grpCount is the group order\n    grpCount = grpCount + 1\n    group = data[i].rstrip("\\n").split("\\t")\n    # use filter to remove vacant string element\n    # use [1:] to remove first element\n    group = list(filter(None, group))[1:]\n    print(grpTitle + str(grpCount) + "<br />")\n    for j in range(0, len(group), 2):\n        # s is the student number\n        s = group[j]\n        # g is the github account\n        g = group[j+1]\n        perWeb(s, g)\n        print("|")\n        perRepo(s, g)\n        print("|")\n        grpWeb(s, g, grpCount)\n        print("|")\n        grpRepo(s, g, grpCount)\n        print("<br />") \n \n cd2022ag1   40923101 web  |  40923101 repo  |  grp web  |  grp repo     40923103 web  |  40923103 repo  |  grp web  |  grp repo     40923108 web  |  40923108 repo  |  grp web  |  grp repo     40923119 web  |  40923119 repo  |  grp web  |  grp repo     40923137 web  |  40923137 repo  |  grp web  |  grp repo     40923154 web  |  40923154 repo  |  grp web  |  grp repo     40923156 web  |  40923156 repo  |  grp web  |  grp repo     40971134 web  |  40971134 repo  |  grp web  |  grp repo    cd2022ag2 40923102 web \xa0 | \xa0 40923102 repo \xa0 |\xa0 grp web \xa0| \xa0 grp repo   40923104 web  |  40923104 repo  |  grp web  |  grp repo     40923105 web  |  40923105 repo  |  grp web  |  grp repo     40923106 web  |  40923106 repo  |  grp web  |  grp repo     40923107 web  |  40923107 repo  |  grp web  |  grp repo     40923110 web  |  40923110 repo  |  grp web  |  grp repo     40923121 web  |  40923121 repo  |  grp web  |  grp repo     40923153 web  |  40923153 repo  |  grp web  |  grp repo    cd2022ag3   40923109 web  |  40923109 repo  |  grp web  |  grp repo     40923111 web  |  40923111 repo  |  grp web  |  grp repo     40923114 web  |  40923114 repo  |  grp web  |  grp repo     40923115 web  |  40923115 repo  |  grp web  |  grp repo     40923122 web  |  40923122 repo  |  grp web  |  grp repo     40923129 web  |  40923129 repo  |  grp web  |  grp repo     40923146 web  |  40923146 repo  |  grp web  |  grp repo     40923148 web  |  40923148 repo  |  grp web  |  grp repo    cd2022ag4   40923116 web  |  40923116 repo  |  grp web  |  grp repo     40923124 web  |  40923124 repo  |  grp web  |  grp repo     40923125 web  |  40923125 repo  |  grp web  |  grp repo     40923126 web  |  40923126 repo  |  grp web  |  grp repo     40923127 web  |  40923127 repo  |  grp web  |  grp repo     40923128 web  |  40923128 repo  |  grp web  |  grp repo     40923138 web  |  40923138 repo  |  grp web  |  grp repo     40923143 web  |  40923143 repo  |  grp web  |  grp repo    cd2022ag5   40923123 web  |  40923123 repo  |  grp web  |  grp repo     40923131 web  |  40923131 repo  |  grp web  |  grp repo     40923133 web  |  40923133 repo  |  grp web  |  grp repo     40923134 web  |  40923134 repo  |  grp web  |  grp repo     40923135 web  |  40923135 repo  |  grp web  |  grp repo     40923139 web  |  40923139 repo  |  grp web  |  grp repo     40923142 web  |  40923142 repo  |  grp web  |  grp repo     40923151 web  |  40923151 repo  |  grp web  |  grp repo    cd2022ag6   40923113 web  |  40923113 repo  |  grp web  |  grp repo     40923130 web  |  40923130 repo  |  grp web  |  grp repo     40923140 web  |  40923140 repo  |  grp web  |  grp repo     40923144 web  |  40923144 repo  |  grp web  |  grp repo     40923145 web  |  40923145 repo  |  grp web  |  grp repo     40923149 web  |  40923149 repo  |  grp web  |  grp repo     40923150 web  |  40923150 repo  |  grp web  |  grp repo     40923152 web  |  40923152 repo  |  grp web  |  grp repo    cd2022ag7   40823132 web  |  40823132 repo  |  grp web  |  grp repo     40823143 web  |  40823143 repo  |  grp web  |  grp repo     40923117 web  |  40923117 repo  |  grp web  |  grp repo     40923118 web  |  40923118 repo  |  grp web  |  grp repo     40923120 web  |  40923120 repo  |  grp web  |  grp repo     40923136 web  |  40923136 repo  |  grp web  |  grp repo     40923147 web  |  40923147 repo  |  grp web  |  grp repo     40923157 web  |  40923157 repo  |  grp web  |  grp repo \n', 'tags': '', 'url': '分組名單.html'}, {'title': '下載NX1980', 'text': '1.到\xa0 http://wcm.cycu.org:88 \xa0下載 \n \n 2. 連接系上的伺服器取得授權 \n NX1980 是透過網路連線取得啟動授權，在校外可以透過 IPv4 或 IPv6 網路連線取得授權。 \n 此設定可以同時在不同網路連線啟動。 \n \n \n \n \n \n \n 1 \n \n \n \n set SPLM_LICENSE_SERVER=port@IPv4_server_address;port@[IPv6_server_address] \n \n \n \n \n \n \n \n \n \n \n 在 28000@192.168.56.3 開頭打上 REM 變成註解，並在下一行設定 授權伺服器 \n \n \n', 'tags': '', 'url': '下載NX1980.html'}, {'title': 'W3', 'text': '', 'tags': '', 'url': 'W3.html'}, {'title': '建立大組倉儲', 'text': '\n 1.先到大組的 github 網站，按 Fork，複製大組網址 \n \n \n 2.開啟 cmd，在 tmp 裡 clone 大組倉儲 \n \n git clone --recurse-submodules 大組網址.git \n \n 3.接著建立一個大組的 token \n \n \n 4.Pull request 再回到大組 github 網站，點 New pull request、creat，組長再去大組 github 的 pull requests 點 merge 同意合併。 \n \n \n \n \n', 'tags': '', 'url': '建立大組倉儲.html'}, {'title': 'NX1980操作Wink', 'text': '我被分配到影片1~5 \n 圖檔 \n 參考影片： \n NX Tutorial 1 - View Controls - Version 1855 \n https://www.youtube.com/watch?v=GUaa97tALxE&list=PLzEsJue49U_EMMv0eBo8MNJjJOq_WHCrl&index=1&t=171s \n \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n ---------------- \n \n 參考影片： \n TECH 4472 - Homework 01 \n \n https://www.youtube.com/watch?v=6CtAJe9acr4&list=PLzEsJue49U_EMMv0eBo8MNJjJOq_WHCrl&index=2&t=269s \n \n \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'NX1980操作Wink.html'}, {'title': 'W4', 'text': '小組與大組開會，彙整各組員執行任務的進度， 利用網頁簡報呈現執行流程與結果。 \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W6', 'text': '任務： 建立個人 Blog 並查驗 \n \n 建立過程 \n 1.在 cmd 輸入 leo 啟動 Leo E ditor \n \n \n 2.開啟檔案(config資料夾中的 pelican.leo \n \n \n \n \xa0 3.在 @edit pelicanconf.py 可更網誌編輯者名稱及標題。 \n \n \n \n 4.在 @edit publishconf.py 中，將 SITEURL 改為自己網站中的 Blog 網址 \n \n \n \n 5.編輯 pages 目錄中的 .md 檔案，皆改為自己網站的網址。 \n \n \xa0 \n \n 6.以@edit為檔名開頭，存為 .md 檔案， Slug 更改為當週查驗的標題。 \n \n \n \n 7.先在自己倉儲資料夾下的 markdown 中，新增 images 資料夾，再到 Leo 右鍵點 local-blog 、GOto Script，再用左鍵點 \xa0local-blog。 \n \n \n \n 8.最後回到 cmd ，在自己的倉儲直接 acp 推送 \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '繪製 Pick and Place demo 範例所需的零組件, 並完成 Coppeliasim 4.1.0、4.2.0 與 4.3.0 版的 MTB 機械手臂 Pick and Place 模擬, 完成後請說明在使用不同 MCAD 系統與版次的情況下, 該如何執行協同產品設計專案. \n 工作分配 \n NX1980：40923102 Solvespace：40923104 Onshape：40923106 NX2008：40923107 NX12：40923110 \n --------------------------- \n NX12 圖檔、取放模擬： 40923107_NX12_MTB robot pick and place \n NX2008 圖檔： 40923107_NX2008_MTB 零組件 \n \n \n scarysim ,\xa0以隨身程式系統編譯程式碼 \n \n \n \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8 uarm', 'text': '工作分配 Onshape：40923104、40932106  NX12：40923102、40923110  Solvespace：40923105、40923107 \n \n 我被分配到以 Solvespace 畫各個零件 工程圖 與 組合圖 \n \n uarm_Solvespace 零件檔 \n uarm_工程圖 \n \n \n CoppeliaSIM 三軸模擬練習 \n 我先使用老師的圖檔練習 \n 檔案： 40923107_uarm_模擬 \n \n \n \n \n Solvespace 操作 \n 繪製任何草圖前，先 sketch in new work plane 可選擇座標平面或可定義三軸座標的零件任意處(可點一個面、2或3條軸)。 \n Solvespace-Property Browser 對話框 active：歷程 \n extrude plane sketch one-sided：單向長料 two-sided：雙向長料 \n solid model as union：聯集(長料，不可與零件本體重疊) difference：差異(除料) assemble：組合(長料，可與零件本體重疊) intersection：反向除料 \n \n', 'tags': '', 'url': 'W8 uarm.html'}, {'title': 'W9', 'text': '自評成績 \n', 'tags': '', 'url': 'W9.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'w10_nx_integ', 'text': '在影片中加入註解說明，以 w10_nx_integ 作為標題。 \n \n \n \n \n \n', 'tags': '', 'url': 'w10_nx_integ.html'}, {'title': 'W10_block_ui', 'text': '在影片中加入註解說明，以 w10_block_ui 作為標題。 \n 利用 Block UI Styler 建立表單, 用來控制 block.prt 零件的長寬與高 \n \n \n \n \n \n 自行操作 \n 以 p1 定義高度，長度設為 p2，寬度設為 p3， 在沒有透過 set Expressions 對長度與寬度對應尺寸約束之前，在 Tools -> Expressions 只能看到 p1，其實 p2 與 p3 應該已經跟草圖的尺寸綁定，因此可以透過 NXOpen Python API 程式 對無列出長寬尺寸變數的零件進行操控, 看是否能夠利用 p2 與 p3 變數控制草圖大小。 \n \n', 'tags': '', 'url': 'W10_block_ui.html'}, {'title': 'w10_ssh', 'text': '在影片中加入註解說明，以 w10_ssh 作為標題。 \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_ssh.html'}, {'title': 'W11', 'text': '解決 透過 SSH 協定時， 合併衝突的問題，以在本週小組會議解決。 \n \n \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n w11-1 任務 \n 兩人一小組， 在大組的同一網頁 (標題為 w11s1 ~w11s4) 加入個人 w8-w10 協同設計過程所負責的項目內容與心得。 \n w11s1 \n 40923107 心得： \n 第八週開始畫 uarm 零件及組合圖， 我被分配到 Solvespace 的繪圖軟體，之前因為沒使用過這款軟體，所以剛開始畫得很卡，現在有比較熟悉，已經了解 在繪製任何草圖前，要先 sketch in new work plane\xa0 選擇座標平面，或定義三軸座標的零件任意處(可點一個面、2或3條軸)，以及長料方式。但在組合的部分還不熟悉。另外已會用SSH 協定，和組長帳號的分組倉儲內容協同，並解決產生的衝突，且會經常使用\xa0git pull 處理內容衝突與合併。 \n \n w11-2 任務 \n 1.STL 檔案資料結構 \n 原始非結構化 三角網格 由表面 單位法線 和由 右手定則 排序的 頂點 用三維三角形 笛卡兒座標系 。STL座標必須是正數 ，沒有尺度資訊，計量單位 為任意。 \n 三角網格： 是數字建模處理的一個重要的概念。 一個3D建模由多個2D三角形以不同角度(邊對邊)組合的3D模型，而外圍的每個三角形都可稱為三角網格。 \n ------------------------------- -------------------------------- \n 2. 為什麼 STL 格式的零件檔案需要分 ASCII 與 Binary 格式? \n STL 的輸出形式可分為  ASCII  與  Binary  兩種，ASCII 的 STL 檔只是為了 讓使用者可以看出其格式並且進一步編輯，但所佔空間較大，Binary 的 形式是較為合理的選擇。 \n ASCII \n ASCII有7位元編碼、8位元編碼兩種形式： \n 7位元組編碼 \n 2的7次方，可表達128個字元。最左邊(MSB)該位元並沒有用到。 \n \n \n 控制字元|通訊字元：第0~32，127號(共34個)\n \n 控制符：LF（換行）、CR（回車）、FF（換頁）、DEL（刪除）、BEL（振鈴）…。 \n 通訊專用字元：SOH（文頭）、EOT（文尾）、ACK（確認）…。 \n \n \n 阿拉伯數字：第48~57號 \n 大寫英文：第65～90號 \n 小寫英文：第97~122號 \n 標點|運算符號：其它 \n \n \n 8位元組編碼 \n 現代的電腦，對於系統內部的資料表達或處理，絕大多數都已經是以八個位元為一個位元組。當ASCII做為內碼使用時，習慣上都會在最大位元的左邊加上一個設定為“0”的位元，因而由七位元交換碼變成八位元內碼。 \n 而這種做法也就代表著八位元內碼的256個碼位當中，會有一半的編碼空間(128個碼位）閒置不用。因此廠商為了在PC或某些終端機上（例如：VT220）提供ASCII所無的一些字元（例如：非英文的字母、數學符號、畫表格用的邊、角、線段等），特別將b8=1的128個 碼位另外賦予字元，稱為延伸ASCII。 \n \n 使用ASCII格式，便是 上面所提到的字元集裏的字元所組成的（包含字元、空白、標點符號、跳行，有時也包含標籤和檔案結束記號），而且沒有任何格式化資訊的文件。一般也稱為ASCII file、text file、text-only file、文字檔……。 \n \xa0 \n Binary \n \n 中文：二進位檔案 \n 英語：Binary file \n \n 廣義的二進位檔案即為檔案，由檔案在外部儲存裝置的存放方式為二進位而得名。 \n 狹義的二進位檔案即指除文字檔案以外的檔案。 \n \n 也就是說所有的檔案都是Binary。但如果用狹義的定位，是除了「ASCII」之外的所有檔案。 \n --------------------------------------------------------------------------------------------- \n 3.Python 程式如何讀取 Binary 格式的 STL 零件檔案? \n Python 讀取 binary 檔的方法： \n \n Python 讀取二進制檔的基本用法 \n Python 使用 \xa0 struct.unpack() \xa0 讀取二進制檔的 str 字串 \n Python 使用 \xa0 struct.unpack() \xa0 讀取二進制檔的 int 整數 \n Python 使用 \xa0 struct.unpack() \xa0 讀取二進制檔的多種資料 \n \n XML \n \n \n \n \n \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': '任務 \n 1.cd2022_uarm_nx12_imported.7z 中, 若計入重複引用的零件, 總數有多少?請列出組成此一 uarm 機械手臂所需的 BOM 列表. \n A:155個 ,  列表 \n \n 2.若不計入重複引用的零件, 總數有多少?請列出各零件名稱. \n A:個別零件總數為58 \n \n 3.當執行機械手臂的設計過程中, 若已知各零件所擬採用的零件材料密度, 請問此一設計中的 uarm 機械手臂的淨重量為多少? (uArm-Swift-Specifications.pdf) \n A:30% 零件採 Steel 製, 其餘採 Aluminum 製, 總重量約 2.2205kg 全部零件採 Aluminum 製, 總重量約 1.4123kg 全部零件採 Steel 製, 總重量約 4.1062kg \n \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'NXOpen Python', 'text': '\n \n \n \n \n \n \n \n \n 實際操作 \n \n \n \n \n \n', 'tags': '', 'url': 'NXOpen Python.html'}]};